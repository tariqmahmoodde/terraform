name: Terraform Apply on PR

on:
  pull_request_review:
    types: [submitted]

jobs:
  check-approval:
    if: github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    outputs:
      artifacts: ${{ steps.get-artifacts.outputs.matrix }}
    steps:
      - name: Get Artifacts
        id: get-artifacts
        env:
          GH_TOKEN: ${{ secrets.HUB_TOKEN }}
        run: |
          # Get the workflow run ID for the plan workflow
          RUN_ID=$(gh api \
            repos/${{ github.repository }}/actions/runs \
            --jq '.workflow_runs[] | select(.head_sha == "'${{ github.event.pull_request.head.sha }}'" and .name == "Terraform Plan") | .id' \
            | head -n1)
          
          echo "Found workflow run ID: $RUN_ID"
          
          # Get artifacts from this specific run
          ARTIFACTS=$(gh api \
            repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts \
            --jq '.artifacts[] | select(.name | endswith("-plan"))')
          
          # Create matrix JSON
          MATRIX="["
          echo "$ARTIFACTS" | while IFS= read -r artifact; do
            if [ ! -z "$artifact" ]; then
              name=$(echo "$artifact" | jq -r '.name')
              id=$(echo "$artifact" | jq -r '.id')
              
              # Extract workspace and directory from artifact name (e.g., prod-resources-plan)
              workspace=$(echo "$name" | cut -d'-' -f1)
              workdir=$(echo "$name" | cut -d'-' -f2)
              
              if [ "$MATRIX" != "[" ]; then
                MATRIX="$MATRIX,"
              fi
              MATRIX="$MATRIX{\"name\":\"$name\",\"id\":$id,\"workspace\":\"$workspace\",\"workdir\":\"$workdir\"}"
            fi
          done
          MATRIX="$MATRIX]"
          
          echo "Matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  terraform-apply:
    needs: check-approval
    if: needs.check-approval.outputs.artifacts != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact: ${{ fromJson(needs.check-approval.outputs.artifacts) }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_TOKEN: ${{ secrets.HUB_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v4
        with:
          terraform_version: 1.5.0

      - name: Download Plan
        run: |
          # Create directory for the plan
          mkdir -p ${{ matrix.artifact.workdir }}
          
          # Download and extract the artifact
          gh api \
            repos/${{ github.repository }}/actions/artifacts/${{ matrix.artifact.id }}/zip \
            > artifact.zip
          unzip artifact.zip -d ${{ matrix.artifact.workdir }}
          rm artifact.zip

      - name: Terraform Init
        working-directory: ${{ matrix.artifact.workdir }}
        run: terraform init

      - name: Select Workspace
        working-directory: ${{ matrix.artifact.workdir }}
        run: terraform workspace select -or-create ${{ matrix.artifact.workspace }}

      - name: Terraform Apply
        id: apply
        working-directory: ${{ matrix.artifact.workdir }}
        run: |
          echo "Applying plan for workspace ${{ matrix.artifact.workspace }} in directory ${{ matrix.artifact.workdir }}"
          terraform apply -auto-approve tfplan

      - name: Comment Apply Result
        uses: peter-evans/create-or-update-comment@v2
        if: always()
        with:
          token: ${{ github.token }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Terraform Apply Result
            - **Directory**: `${{ matrix.artifact.workdir }}`
            - **Workspace**: `${{ matrix.artifact.workspace }}`
            - **Status**: ${{ steps.apply.outcome == 'success' && '✅ Success' || '❌ Failed' }}
